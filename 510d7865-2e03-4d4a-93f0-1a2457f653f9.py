#!/usr/bin/env python
# coding: utf-8

# ## –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[28]:


pip install -U scikit-learn


# In[29]:


import pandas as pd
import numpy as np
import random
import seaborn as sns
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader

from math import ceil
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer

np.random.seed(0)


# <div class="alert alert-success">
# <b>üëç –£—Å–ø–µ—Ö:</b> –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!
# </div>

# In[30]:


df = pd.read_csv('/datasets/6_class.csv', index_col=0)
df.head()


# In[31]:


df.info()
df.describe()


# <div class="alert alert-success">
# <b>üëç –£—Å–ø–µ—Ö:</b> –î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω!
# </div>

# ## –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
# 

# –ü—Ä–∏–≤–µ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ —Ä–∞–±–æ—á–µ–º—É –≤–∏–¥—É

# In[32]:


df.columns = ['temperature', 'luminosity', 'radius', 'abs_magnitude', 'star_type', 'star_color']


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã

# In[33]:


df.isna().sum()


# In[34]:


df.duplicated().sum()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:

# In[35]:


def draw_distribution(data, title, x, y):
    plt.figure(figsize=(12, 8))
    sns.histplot(data=data, kde=True, bins=50)
    plt.title(title)
    plt.xlabel(x)
    plt.ylabel(y)
    plt.show()


    plt.figure(figsize=(8, 1))
    sns.boxplot(x=data)
    plt.xlabel(x)
    plt.show()


# –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π:

# In[36]:


draw_distribution(df['temperature'], '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ö', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# In[37]:


draw_distribution(df['luminosity'], '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∏–º–æ—Å—Ç–µ–π', '–°–≤–µ—Ç–∏–º–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# –ù–∞–±–ª—é–¥–∞–µ–º –ø–∏–∫ –æ–∫–æ–ª–æ –Ω—É–ª—è, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–≤–µ–∑–¥ —Å –Ω–∏–∑–∫–æ–π —Å–≤–µ—Ç–∏–º–æ—Å—Ç—å—é

# In[38]:


draw_distribution(df['radius'], '–†–∞—Å–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–æ–≤', '–†–∞–¥–∏—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# –ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –Ω–∞–±–ª—é–¥–∞–µ–º –º–Ω–æ–≥–æ –≤—ã–±—Ä–æ—Å–æ–≤, –Ω–æ –Ω–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ 

# In[39]:


draw_distribution(df['abs_magnitude'], '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∑–≤–µ–¥–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã', '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –∑–≤–µ–∑–¥–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

# In[40]:


df['star_color'].unique()


# –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏

# In[41]:


df['star_color']= df['star_color'].str.strip()
df['star_color']= df['star_color'].str.lower() 


# –∑–∞–º–µ–Ω–∏–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –Ω–∞ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ

# In[ ]:





# In[ ]:





# In[42]:


df['star_color'] = df['star_color'].str.lower()
df['star_color'] = df['star_color'].str.strip()
df['star_color'] = df['star_color'].replace(['yellow-white'],'white yellow')
df['star_color'] = df['star_color'].replace(['white-yellow'],'white yellow')
df['star_color'] = df['star_color'].replace(['blue-white'],'blue white')
df.groupby(['star_color']).agg('count')['luminosity']


# In[43]:


df['star_color'] = df['star_color'].replace(['yellowish white'],'white yellow')
df['star_color'] = df['star_color'].replace(['whitish'],'white')
df['star_color'] = df['star_color'].replace(['orange-red'],'red')
df['star_color'] = df['star_color'].replace(['pale yellow orange'],'red')
df['star_color'] = df['star_color'].replace(['yellowish'],'white yellow')
df['star_color'] = df['star_color'].replace(['orange'],'red')
df.groupby(['star_color']).agg('count')['luminosity']


# In[44]:


df['star_color'].value_counts().plot(kind='bar', 
                                     title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç–∞–º', 
                                     xlabel='–¶–≤–µ—Ç –∑–≤–µ–∑–¥—ã', 
                                     ylabel='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 
                                     figsize=(8,6));


# –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –≤—ã–±–æ—Ä–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –∫—Ä–∞—Å–Ω—ã—Ö –∑–≤–µ–∑–¥, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–≤–µ—Ç–∏–º–æ—Å—Ç–∏
# 

# In[ ]:





# In[45]:


df['star_type'].value_counts().plot(kind = 'bar',
                                    title = '–†–∞—Å–ø—Ä–µ–¥–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º',
                                    xlabel = '–¢–∏–ø –∑–≤–µ–∑–¥—ã',
                                    ylabel = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                    figsize=(8,6));


# –í –¥–∞–Ω–Ω—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞

# <div class="alert alert-success">
# <b>üëç –£—Å–ø–µ—Ö:</b> –í—Å–µ –≤–µ—Ä–Ω–æ!
# </div>

# ## –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏

# –†–∞–∑–¥–µ–ª–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ - –≤—ã–¥–µ–ª–∏–º –ø–æ–¥ –æ–±—É—á–∞—é—â—É—é 85% –∏ 15% –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é.

# In[46]:


x_train, x_test, y_train, y_test = train_test_split(df.drop('temperature', axis=1), 
                                                    df['temperature'], 
                                                    train_size=0.85, 
                                                    random_state=42, 
                                                    shuffle=True)


# –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ–¥–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

# In[47]:


numeric = ['luminosity', 'radius', 'abs_magnitude']

scaler = StandardScaler()
scaler.fit(x_train[numeric])
x_train[numeric] = scaler.transform(x_train[numeric])
x_test[numeric] = scaler.transform(x_test[numeric])


# In[48]:


categorial = ['star_color', 'star_type']

tmp_train = x_train[categorial]
tmp_test= x_test[categorial]


encoder_ohe = OneHotEncoder(handle_unknown='ignore')
encoder_ohe.fit(x_train[categorial])

tmp_train = pd.DataFrame(encoder_ohe.transform(x_train[categorial]).toarray(), 
                                   columns=encoder_ohe.get_feature_names_out(),
                                   index=x_train.index)
tmp_test = pd.DataFrame(encoder_ohe.transform(x_test[categorial]).toarray(), 
                                   columns=encoder_ohe.get_feature_names_out(),
                                   index=x_test.index)

x_train.drop(categorial, axis=1, inplace=True)
x_train = x_train.join(tmp_train)

x_test.drop(categorial, axis=1, inplace=True)
x_test = x_test.join(tmp_test)


# <div class="alert alert-warning">
# <b>ü§î –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª—É—á—à–µ —É–¥–∞–ª—è—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
# </div>

# –°–æ–∑–¥–∞–¥–∏–º —Ç–µ–Ω–∑–æ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

# In[49]:


x_train_torch = torch.FloatTensor(x_train.values)
y_train_torch = torch.FloatTensor(y_train.values)
x_test_torch = torch.FloatTensor(x_test.values)
y_test_torch = torch.FloatTensor(y_test.values)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤, –¥–≤—É—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è:

# In[50]:


class Net(nn.Module):
    def __init__(self, input_size, hidden_size1, hidden_size2, num_classes):
        super(Net, self).__init__()
        
        self.fc1 = nn.Linear(input_size, hidden_size1)
        self.act1 = nn.Tanh()
        
        self.fc2 = nn.Linear(hidden_size1, hidden_size2)
        self.act2 = nn.ReLU()
        
        self.fc3 = nn.Linear(hidden_size2, num_classes)
        
        
        
    def forward(self, x):
        out = self.fc1(x)
        out = self.act1(out)
        
        out = self.fc2(out)
        out = self.act2(out)
        
        out = self.fc3(out)
        
        return out


# –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –≤—ã–≤–æ–¥–∞ RMSE:

# In[51]:


def net_learn(num_epochs, net):
    rmse_best = 50000
    rmse_list = []
    for epoch in range(num_epochs):
        optimizer.zero_grad()
 
        preds = net.forward(x_train_torch).flatten()
            
        loss_value = loss(preds, y_train_torch)

        loss_value.backward()
            
        optimizer.step()
    
     
        net.eval()
        test_preds = net.forward(x_test_torch)
        rmse = mean_squared_error(y_test_torch.detach().numpy(), test_preds.detach().numpy(), squared=False)
        rmse_list.append(rmse)
        if rmse < rmse_best:
            rmse_best = rmse
            test_preds_best = test_preds 
            best_epoch = epoch 
    print('RMSE:', round(rmse_best, 3), '| ep', epoch, 'from', num_epochs, '| best_epoch:', best_epoch)
    return test_preds_best, rmse_list


# –ó–∞–¥–∞–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–ª–æ–µ —Å–µ—Ç–∏:

# In[52]:


n_in_neurons = x_train.shape[1]
n_hidden_neurons = list(range(100, 1050, 50))      
n_out_neurons = 1                                  

loss = nn.MSELoss()                                

num_epochs = 1500
comb = 10      


# In[ ]:


for c in range(comb):
    hidden_size_1 = random.choice(n_hidden_neurons)    
    hidden_size_2 = random.choice(n_hidden_neurons)
    print('hidden 1 =',hidden_size_1, 'hidden 2 =',hidden_size_2)
    net = Net(n_in_neurons, hidden_size_1, hidden_size_2, n_out_neurons)
    optimizer = torch.optim.Adam(net.parameters(), lr=1e-3)
    test_preds, rmse_list = net_learn(num_epochs, net)
    print('---------------------------')  


# –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —è–ª—è–µ—Ç—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è 250 –Ω–µ–π—Ä–æ–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–ª–æ–µ –∏ 350 –Ω–∞ –≤—Ç–æ—Ä–æ–º, –¥–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ RMSE 4261.709, —á—Ç–æ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –≤ 4500.
# 
# –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ "–§–∞–∫—Ç ‚Äî –ü—Ä–æ–≥–Ω–æ–∑", –≥–¥–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏ –±—É–¥—É—Ç –æ—Ç–ª–æ–∂–µ–Ω—ã —É—Å–ª–æ–≤–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–≤—ë–∑–¥, –∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö:

# In[57]:


net = Net(n_in_neurons, 250, 350, n_out_neurons)
optimizer = torch.optim.Adam(net.parameters(), lr=1e-3)
test_preds, rmse_list = net_learn(num_epochs, net)

epochs = np.arange(1, num_epochs+1)
plt.figure(figsize=[10,6])
sns.lineplot(x=epochs, y=rmse_list, label='RMSE', color='red')
plt.legend()
plt.title('–ó–Ω–∞—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ —ç–ø–æ—Ö–∞–º')
plt.xlabel('epochs')
plt.ylabel('RMSE')
plt.show()


# –ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–∏–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –æ–±—É—á–∞—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å–ª–µ 1300 —ç–ø–æ—Ö–∏.

# In[58]:


test_preds = pd.DataFrame(test_preds.detach().numpy(), columns=['temperature'])  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
y_test = pd.DataFrame((y_test), columns=['temperature']).reset_index().drop('index', axis=1)


# In[59]:


fig, ax = plt.subplots(figsize=[15,10])
plt.bar(x=test_preds.index, height=test_preds['temperature'], color='#fce80b' , label='–ü—Ä–æ–≥–Ω–æ–∑')
plt.bar(x=y_test.index, height=y_test['temperature'], color='#4cc2f6', label='–§–∞–∫—Ç', width= 0.4)
plt.title('–≥—Ä–∞—Ñ–∏–∫ "–§–∞–∫—Ç ‚Äî –ü—Ä–æ–≥–Ω–æ–∑"')
plt.xlabel('–ù–æ–º–µ—Ä –∑–≤–µ–∑–¥—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∞–Ω–Ω—ã—Ö')
plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–µ–∑–¥—ã')
ax.legend()
plt.show()


# –ü–æ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –∏—Å—Ö–æ–¥—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–æ 5000 –∫–µ–ª—å–≤–∏–Ω–æ–≤, —Å–≤—è–∑–∞–Ω–æ —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ—Å–Ω–æ–≤–Ω—É—é –º–∞—Å—Å—É –¥–∞—Ç–∞—Å–µ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –Ω–∏—Ö –º–æ–¥–µ–ª—å —Ä–∞–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ

# ## –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏

# –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ç—å –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –±–∞—Ç—á–∞–º–∏, –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é net_learn —Ç–∞–∫, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–∏.  
# 
# –û–±—ä—è–≤–∏–º –∫–ª–∞—Å—Å EarlyStopping, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:

# In[29]:


class EarlyStopping():
    def __init__(self, patience=7, min_delta=0):

        self.patience = patience
        self.min_delta = min_delta
        self.counter = 0
        self.best_loss = None
        self.early_stop = False
        
    def __call__(self, val_loss):
        if self.best_loss == None:
            self.best_loss = val_loss
        elif self.best_loss - val_loss > self.min_delta:
            self.best_loss = val_loss

            self.counter = 0
        elif self.best_loss - val_loss < self.min_delta:
             self.counter += 1
                
        if self.counter >= self.patience:
                print('Early stopping')
                self.early_stop = True


# In[30]:


def net_learn_batches(num_epochs, net):
    early_stopping = EarlyStopping() 
    rmse_best = 50000
    for epoch in range(num_epochs):
        net.train()
        for batch in train_dataloader:
            data_train, temperature_train = batch  
            optimizer.zero_grad()

            preds = net.forward(data_train).flatten()

            loss_value = torch.sqrt(loss(preds, temperature_train))
            loss_value.backward()
            optimizer.step()

        predicted_temp = [] 
        with torch.no_grad():
            net.eval()
            for batch in test_dataloader:
                data_test, temperature_test = batch
  
                test_preds = net.forward(data_test).flatten()
                predicted_temp.append(test_preds)
                RMSE_loss = torch.sqrt(loss(test_preds, temperature_test))

        predicted_temp = torch.cat(predicted_temp).detach().numpy()
        rmse = mean_squared_error(y_test, predicted_temp, squared=False)
        rmse_list.append(rmse)
        if rmse < rmse_best:
            rmse_best = rmse
            best_epoch = epoch
            test_preds_best = predicted_temp
        early_stopping(rmse)

        if early_stopping.early_stop:
            break 
    print('RMSE:', round(rmse_best, 3), '| ep', epoch, 'from', num_epochs, '| best_epoch:', best_epoch)
    return test_preds_best


# In[31]:


class Net_Batch(nn.Module):
    def __init__(self, input_size, hidden_size1, hidden_size2, num_classes):
        super(Net_Batch, self).__init__()
        
        self.fc1 = nn.Linear(input_size, hidden_size1)

        self.act1 = nn.Tanh()
        self.bn1 = nn.BatchNorm1d(hidden_size1)
        
        self.fc2 = nn.Linear(hidden_size1, hidden_size2) 
        self.act2 = nn.ReLU()
        
        
        self.fc3 = nn.Linear(hidden_size2, num_classes) 
                        
    def forward(self, x):
        out = self.fc1(x)
        out = self.act1(out)
        out = self.bn1(out)
       
        out = self.fc2(out)
        out = self.act2(out)
        
        out = self.fc3(out)
        
        return out


# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–æ —Å–ø–∏—Å–∫—É:

# In[32]:


batch_size = list(range(15, len(x_train_torch), 25))

dataset_train = torch.utils.data.TensorDataset(x_train_torch, y_train_torch)
dataset_test = torch.utils.data.TensorDataset(x_test_torch, y_test_torch)


# In[33]:


for b in batch_size:
    train_dataloader = DataLoader(dataset_train, batch_size=b, shuffle=True, num_workers=0)
    test_dataloader = DataLoader(dataset_test, batch_size=b, num_workers=0)  
    print('batch_size:', b)    
    net = Net_Batch(n_in_neurons, 650, 1000, n_out_neurons)
    optimizer = torch.optim.Adam(net.parameters(), lr=1e-3)
    batch_test_preds = net_learn_batches(num_epochs, net)
    print('---------------------------')


# –õ—É—á—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ 190, –æ–¥–Ω–∞–∫–æ, –æ–±—É—á–µ–Ω–∏–µ –±–∞—Ç—á–∞–º–∏ —É—Ö—É–¥—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ RMSE
# –ü–æ—ç—Ç–æ–º—É –¥–∞–ª–µ–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é net_learn.
# 
# –î–∞–ª–µ–µ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ dropout, —É–≤–µ–ª–∏—á–∏–≤ –∫–æ–ª-–≤–æ —ç–ø–æ—Ö:

# In[34]:


dropout = [0.5, 0.7, 0.8, 0.9] 
comb = 10
num_epochs = 1200


# In[35]:


for c in range(comb):
    p1 = random.choice(dropout)
    p2 = random.choice(dropout)
    print('drop =', p1, p2)
    class Net_Dropout(nn.Module):
        def __init__(self, input_size, hidden_size1, hidden_size2, num_classes):
            super(Net_Dropout, self).__init__()
        
            self.fc1 = nn.Linear(input_size, hidden_size1)
            self.act1 = nn.Tanh()
            self.dp1 = nn.Dropout(p=p1)
        
            self.fc2 = nn.Linear(hidden_size1, hidden_size2) 
            self.act2 = nn.ReLU()
            self.dp2 = nn.Dropout(p=p2)
        
            self.fc3 = nn.Linear(hidden_size2, num_classes) 
        
        
        def forward(self, x):
            
            out = self.fc1(x)
            out = self.act1(out)
            out = self.dp1(out)
        
            out = self.fc2(out)
            out = self.act2(out)
            out = self.dp2(out)
            
            out = self.fc3(out)
            return out
           
    net = Net_Dropout(n_in_neurons, 950, 750, n_out_neurons)
    optimizer = torch.optim.Adam(net.parameters(), lr=1e-3)
    
    drop_test_preds = net_learn(num_epochs, net)
    
    print('---------------------------')    


# –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–µ–±—è –∑–Ω–∞—á–µ–Ω–∏—è Dropout 0.7 –∏ 0.7, –æ–¥–Ω–∞–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ª—É—á—à–µ.

# In[36]:


drop_test_preds = pd.DataFrame(drop_test_preds[0].detach().numpy(), columns=['temperature'])


# In[37]:


fig, ax = plt.subplots(figsize=[17,10])
plt.bar(x=test_preds.index, height=test_preds['temperature'], color='#fce80b' , label='–ü—Ä–æ–≥–Ω–æ–∑', width= 1.1)
plt.bar(x=drop_test_preds.index, height=drop_test_preds['temperature'], color='#e09f1b' , label='–ü—Ä–æ–≥–Ω–æ–∑ c dropout', width= 0.6)

plt.bar(x=y_test.index, height=y_test['temperature'], color='#4cc2f6', label='–§–∞–∫—Ç', width= 0.4)
plt.title('–≥—Ä–∞—Ñ–∏–∫ "–§–∞–∫—Ç ‚Äî –ü—Ä–æ–≥–Ω–æ–∑"')
plt.xlabel('–ù–æ–º–µ—Ä –∑–≤–µ–∑–¥—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∞–Ω–Ω—ã—Ö')
plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–µ–∑–¥—ã')
ax.legend()
plt.show()


# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á—É—Ç—å –ª—É—á—à–µ, –ø—Ä–∏—á–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã –Ω–∞ –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ 5000 –ö, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–µ–±–ª–∞–¥–∞–Ω–∏–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —Ä–∞–¥–∏—É—Å–∞ –∏ —Å–≤–µ—Ç–∏–º–æ—Å—Ç–µ–π.

# ## –í—ã–≤–æ–¥—ã

# –ù–∞—à–µ–π –∑–∞–¥–∞—á–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ –±—ã–ª–æ –ø—Ä–∏–¥—É–º–∞—Ç—å, –∫–∞–∫ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥. –î–ª—è —ç—Ç–æ–≥–æ –≤ –Ω–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –∏–º–µ–ª–∏—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–º 240 –∑–≤–µ–∑–¥–∞–º. –û–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤–µ—Ç–∏–º–æ—Å—Ç–∏, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ, –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∑–≤–µ–∑–¥–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–µ, –∑–≤–µ–∑–¥–Ω–æ–º —Ü–≤–µ—Ç–µ, —Ç–∏–ø–µ –∑–≤–µ–∑–¥—ã, –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (—Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫).
# 
# –ú—ã –ø—Ä–æ–≤–µ–ª–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é –º–æ–¥–µ–ª–∏. –ë—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏.
# 
# 
# –ü–µ—Ä–µ–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ç–∏ —Å –¥–≤—É–º—è —Å–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—è–º–∏ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è RMSE –≤ 4261.7.
# 
# –ú—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞—Ç—á–µ–π –∏ ¬´–≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º¬ª —á–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤, –Ω–æ –ø—Ä–µ–≤–∑–æ–π—Ç–∏ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å.
# 
# –í —Ü–µ–ª–æ–º –º–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ —É–≥–∞–¥—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É ¬´—Ö–æ–ª–æ–¥–Ω—ã—Ö¬ª –∑–≤–µ–∑–¥, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö –±–æ–ª—å—à–µ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É –±–æ–ª–µ–µ –≥–æ—Ä—è—á–∏—Ö.

# In[ ]:




